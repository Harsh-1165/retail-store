name: Fixed Sequential Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      start_from:
        description: 'Start deployment from service'
        required: true
        default: 'ui'
        type: choice
        options:
        - ui
        - catalog
        - orders
        - checkout
        - cart
        - app

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  # Phase 1: Deploy UI Service
  deploy-ui:
    name: 🎨 Deploy UI Service
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.start_from == 'ui'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test secrets
        run: |
          echo "Testing required secrets..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID is missing"
            exit 1
          fi
          echo "✅ Secrets configured"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push UI Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/ui
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-ui:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-ui:latest

      - name: Deploy UI service (simplified)
        run: |
          echo "✅ UI service built and pushed successfully"
          echo "Image: ${{ env.ECR_REGISTRY }}/retail-store-ui:${{ github.sha }}"

  # Phase 2: Deploy Catalog Service
  deploy-catalog:
    name: 📚 Deploy Catalog Service
    runs-on: ubuntu-latest
    needs: deploy-ui
    if: |
      always() && (
        github.event.inputs.start_from == 'catalog' ||
        (github.event.inputs.start_from == 'ui' && needs.deploy-ui.result == 'success')
      )
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Catalog Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/catalog
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-catalog:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-catalog:latest

      - name: Deploy Catalog service (simplified)
        run: |
          echo "✅ Catalog service built and pushed successfully"
          echo "Image: ${{ env.ECR_REGISTRY }}/retail-store-catalog:${{ github.sha }}"

  # Phase 3: Deploy Orders Service
  deploy-orders:
    name: 📦 Deploy Orders Service
    runs-on: ubuntu-latest
    needs: [deploy-ui, deploy-catalog]
    if: |
      always() && (
        github.event.inputs.start_from == 'orders' ||
        (github.event.inputs.start_from == 'catalog' && needs.deploy-catalog.result == 'success') ||
        (github.event.inputs.start_from == 'ui' && needs.deploy-ui.result == 'success' && needs.deploy-catalog.result == 'success')
      )
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Orders Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/orders
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-orders:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-orders:latest

      - name: Deploy Orders service (simplified)
        run: |
          echo "✅ Orders service built and pushed successfully"
          echo "Image: ${{ env.ECR_REGISTRY }}/retail-store-orders:${{ github.sha }}"

  # Summary
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-ui, deploy-catalog, deploy-orders]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# 🚀 Sequential Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Started from:** ${{ github.event.inputs.start_from }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Service Status" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 UI: ${{ needs.deploy-ui.result == 'success' && '✅ Success' || needs.deploy-ui.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 Catalog: ${{ needs.deploy-catalog.result == 'success' && '✅ Success' || needs.deploy-catalog.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Orders: ${{ needs.deploy-orders.result == 'success' && '✅ Success' || needs.deploy-orders.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
