name: Deploy All Services

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}

jobs:
  # Phase 1: Deploy UI Service
  deploy-ui:
    name: üé® Deploy UI Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push UI Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/ui
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-ui:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-ui:latest
            ${{ env.ECR_REGISTRY }}/retail-store-ui:${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify UI image push
        run: |
          echo "‚úÖ Successfully built and pushed retail-store-ui:${{ github.sha }}"
          aws ecr describe-images --repository-name retail-store-ui --image-ids imageTag=${{ github.sha }} --region ${{ env.AWS_REGION }}

  # Phase 2: Deploy Catalog Service
  deploy-catalog:
    name: üìö Deploy Catalog Service
    runs-on: ubuntu-latest
    needs: deploy-ui
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Catalog Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/catalog
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-catalog:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-catalog:latest
            ${{ env.ECR_REGISTRY }}/retail-store-catalog:${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Catalog image push
        run: |
          echo "‚úÖ Successfully built and pushed retail-store-catalog:${{ github.sha }}"
          aws ecr describe-images --repository-name retail-store-catalog --image-ids imageTag=${{ github.sha }} --region ${{ env.AWS_REGION }}

  # Phase 3: Deploy Orders Service
  deploy-orders:
    name: üì¶ Deploy Orders Service
    runs-on: ubuntu-latest
    needs: deploy-catalog
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Orders Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/orders
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-orders:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-orders:latest
            ${{ env.ECR_REGISTRY }}/retail-store-orders:${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Orders image push
        run: |
          echo "‚úÖ Successfully built and pushed retail-store-orders:${{ github.sha }}"
          aws ecr describe-images --repository-name retail-store-orders --image-ids imageTag=${{ github.sha }} --region ${{ env.AWS_REGION }}

  # Phase 4: Deploy Checkout Service
  deploy-checkout:
    name: üí≥ Deploy Checkout Service
    runs-on: ubuntu-latest
    needs: deploy-orders
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Checkout Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/checkout
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-checkout:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-checkout:latest
            ${{ env.ECR_REGISTRY }}/retail-store-checkout:${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Checkout image push
        run: |
          echo "‚úÖ Successfully built and pushed retail-store-checkout:${{ github.sha }}"
          aws ecr describe-images --repository-name retail-store-checkout --image-ids imageTag=${{ github.sha }} --region ${{ env.AWS_REGION }}

  # Phase 5: Deploy Cart Service
  deploy-cart:
    name: üõí Deploy Cart Service
    runs-on: ubuntu-latest
    needs: deploy-checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Cart Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/cart
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-cart:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-cart:latest
            ${{ env.ECR_REGISTRY }}/retail-store-cart:${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Cart image push
        run: |
          echo "‚úÖ Successfully built and pushed retail-store-cart:${{ github.sha }}"
          aws ecr describe-images --repository-name retail-store-cart --image-ids imageTag=${{ github.sha }} --region ${{ env.AWS_REGION }}

  # Phase 6: Deploy App Service
  deploy-app:
    name: üöÄ Deploy App Service
    runs-on: ubuntu-latest
    needs: deploy-cart
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push App Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/app
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/retail-store-app:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/retail-store-app:latest
            ${{ env.ECR_REGISTRY }}/retail-store-app:${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify App image push
        run: |
          echo "‚úÖ Successfully built and pushed retail-store-app:${{ github.sha }}"
          aws ecr describe-images --repository-name retail-store-app --image-ids imageTag=${{ github.sha }} --region ${{ env.AWS_REGION }}

  update-helm-charts:
    name: ‚öôÔ∏è Update All Helm Charts
    needs: [deploy-ui, deploy-catalog, deploy-orders, deploy-checkout, deploy-cart, deploy-app]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update all Helm values
        run: |
          services=("ui" "catalog" "orders" "checkout" "cart" "app")
          
          echo "üîÑ Updating Helm values for all services..."
          
          for service in "${services[@]}"; do
            if [ -f "src/$service/chart/values.yaml" ]; then
              echo "Updating $service..."
              sed -i "s|tag: .*|tag: \"${{ github.sha }}\"|g" "src/$service/chart/values.yaml"
              echo "‚úÖ Updated $service"
            else
              echo "‚ö†Ô∏è No Helm chart found for $service"
            fi
          done

      - name: Commit Helm changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add src/*/chart/values.yaml
          
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No Helm changes to commit"
          else
            git commit -m "üöÄ Deploy All Services: Update image tags to ${{ github.sha }}

            Environment: ${{ env.ENVIRONMENT }}
            Services: ui, catalog, orders, checkout, cart, app
            Commit: ${{ github.sha }}"
            git push
            echo "‚úÖ All Helm charts updated"
          fi

  deploy-to-kubernetes:
    name: üéØ Deploy to Kubernetes
    needs: [deploy-ui, deploy-catalog, deploy-orders, deploy-checkout, deploy-cart, deploy-app, update-helm-charts]
    runs-on: ubuntu-latest
    if: ${{ secrets.EKS_CLUSTER_NAME != '' }}
    strategy:
      matrix:
        service: [ui, catalog, orders, checkout, cart, app]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy ${{ matrix.service }} to Kubernetes
        run: |
          service="${{ matrix.service }}"
          namespace="retail-store-${{ env.ENVIRONMENT }}"
          release_name="retail-store-$service"
          
          echo "üöÄ Deploying $service to $namespace..."
          
          # Create namespace if it doesn't exist
          kubectl create namespace $namespace --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy with Helm if chart exists
          if [ -d "./src/$service/chart" ]; then
            helm upgrade --install $release_name ./src/$service/chart \
              --namespace $namespace \
              --set image.tag=${{ github.sha }} \
              --set environment=${{ env.ENVIRONMENT }} \
              --wait --timeout=10m
            echo "‚úÖ $service deployed with Helm"
          else
            echo "‚ö†Ô∏è No Helm chart found for $service, skipping Kubernetes deployment"
          fi

      - name: Verify ${{ matrix.service }} deployment
        run: |
          service="${{ matrix.service }}"
          namespace="retail-store-${{ env.ENVIRONMENT }}"
          
          echo "üîç Verifying deployment for $service..."
          
          # Check if deployment exists
          if kubectl get deployment retail-store-$service -n $namespace > /dev/null 2>&1; then
            kubectl wait --for=condition=available --timeout=300s deployment/retail-store-$service -n $namespace || true
            kubectl get deployment retail-store-$service -n $namespace -o wide
            kubectl get pods -n $namespace -l app.kubernetes.io/name=retail-store-$service
          else
            echo "‚ÑπÔ∏è No Kubernetes deployment found for $service"
          fi

  deployment-summary:
    name: üìä Final Deployment Summary
    needs: [deploy-ui, deploy-catalog, deploy-orders, deploy-checkout, deploy-cart, deploy-app, update-helm-charts, deploy-to-kubernetes]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "# üéâ All Services Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üöÄ Services Deployed" >> $GITHUB_STEP_SUMMARY
          services=("ui" "catalog" "orders" "checkout" "cart" "app")
          for service in "${services[@]}"; do
            echo "- **$service**: \`${{ env.ECR_REGISTRY }}/retail-store-$service:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- üé® UI: ${{ needs.deploy-ui.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üìö Catalog: ${{ needs.deploy-catalog.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ Orders: ${{ needs.deploy-orders.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üí≥ Checkout: ${{ needs.deploy-checkout.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üõí Cart: ${{ needs.deploy-cart.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ App: ${{ needs.deploy-app.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚öôÔ∏è Update Helm: ${{ needs.update-helm-charts.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üéØ Deploy K8s: ${{ needs.deploy-to-kubernetes.result == 'success' && '‚úÖ Success' || needs.deploy-to-kubernetes.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Quick Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Check all pods" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get pods -n retail-store-${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check all services" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get svc -n retail-store-${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Get application URL" >> $GITHUB_STEP_SUMMARY
          echo "kubectl get svc -n ingress-nginx ingress-nginx-controller" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéä **All services are now deployed and ready!**" >> $GITHUB_STEP_SUMMARY
